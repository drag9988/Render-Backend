#!/usr/bin/env node

/**
 * Python Script Diagnostic Tool
 * This script extracts and tests the Python scripts generated by the OnlyOffice Enhanced Service
 */

const fs = require('fs').promises;
const path = require('path');

async function extractAndTestPythonScripts() {
    console.log('üîç Extracting Python scripts from OnlyOffice Enhanced Service...\n');

    const serviceFilePath = './src/onlyoffice-enhanced.service.ts';
    
    try {
        // Read the service file
        const serviceContent = await fs.readFile(serviceFilePath, 'utf8');
        
        // Extract the premium Python script
        const premiumScriptMatch = serviceContent.match(/generatePremiumPythonScript\(\): string\s*{\s*return\s*`([^`]+)`/s);
        if (premiumScriptMatch) {
            const premiumScript = premiumScriptMatch[1];
            await fs.writeFile('./extracted-premium-script.py', premiumScript);
            console.log('‚úÖ Extracted premium Python script to: ./extracted-premium-script.py');
            
            // Basic syntax check
            await checkPythonSyntax('./extracted-premium-script.py', 'Premium');
        } else {
            console.log('‚ùå Could not extract premium Python script');
        }

        // Extract the fallback Python script  
        const fallbackScriptMatch = serviceContent.match(/generateFallbackPythonScript\(\): string\s*{\s*return\s*`([^`]+)`/s);
        if (fallbackScriptMatch) {
            const fallbackScript = fallbackScriptMatch[1];
            await fs.writeFile('./extracted-fallback-script.py', fallbackScript);
            console.log('‚úÖ Extracted fallback Python script to: ./extracted-fallback-script.py');
            
            // Basic syntax check
            await checkPythonSyntax('./extracted-fallback-script.py', 'Fallback');
        } else {
            console.log('‚ùå Could not extract fallback Python script');
        }

        console.log('\nüéØ What to do next:');
        console.log('1. Check the extracted Python scripts for syntax errors');
        console.log('2. Test them manually: python extracted-premium-script.py test.pdf test.pptx pptx');
        console.log('3. Install missing packages if needed');
        console.log('4. Run the server and check the enhanced logs');

    } catch (error) {
        console.error('‚ùå Error:', error.message);
    }
}

async function checkPythonSyntax(scriptPath, scriptType) {
    const { exec } = require('child_process');
    const { promisify } = require('util');
    const execAsync = promisify(exec);
    
    try {
        console.log(`\nüêç Checking ${scriptType} script syntax...`);
        const pythonPath = process.env.PYTHON_PATH || 'python3';
        
        // Check syntax
        await execAsync(`${pythonPath} -m py_compile "${scriptPath}"`);
        console.log(`‚úÖ ${scriptType} script syntax is valid`);
        
        // Get script stats
        const stats = await fs.stat(scriptPath);
        console.log(`üìä ${scriptType} script size: ${stats.size} bytes`);
        
    } catch (error) {
        console.log(`‚ùå ${scriptType} script syntax error:`, error.message);
        
        // Try to show more specific error
        try {
            const { stderr } = await execAsync(`${pythonPath} -c "compile(open('${scriptPath}').read(), '${scriptPath}', 'exec')"`);
            if (stderr) {
                console.log(`üîç Detailed error: ${stderr}`);
            }
        } catch (detailError) {
            console.log(`üîç Detailed error: ${detailError.message}`);
        }
    }
}

// Run the extraction
extractAndTestPythonScripts();
